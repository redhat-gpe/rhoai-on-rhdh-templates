apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: chatbot-rag-self-hosted-llm-template
  title: |
    RAG: Ingestion Pipeline
  description: Chat with your documentation using LLM and RAG.
  tags:
    - recommended
    - java
    - python
    - ai
    - rhoai
    - rhtap
spec:
  owner: rhdh
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - component_id
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: chatbot-app
          ui:field: EntityNamePicker
          maxLength: 12
        description:
          title: Description
          type: string
          description: Help others understand what this ap is for.
          default: A cool RAG app
    - title: Model Details
      required:
        - model_name
        - model_max_length
        - rhoai_doc_version
      properties:
        model_name:
          title: Model Name
          type: string
          enum:
            - mistral-7b-instruct-v03
            - granite-30-8b-instruct
        model_max_length:
          title: Max model length
          default: "4096"
          type: string
          description: The maximum length for this model
        rhoai_doc_version:
          title: Red Hat Openshift AI Documentation to Ingest
          type: string
          enum:
            - "2.8"
            - "2.13"
            - "2.16"
            - "2.18"
            - "2.19"
    - title: Provide Image Registry Information
      required:
        - image_registry
      properties:
        image_registry:
          title: Image Registry
          type: string
          default: Quay
          enum:
            - Quay
      dependencies:
        image_registry:
          oneOf:
            - properties:
                image_registry:
                  enum:
                    - Quay
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: {{ quay_host }}
                image_organization:
                  title: Organization
                  type: string
                  description: Name of the Quay Organization
                  default: quayadmin
                image_tag:
                  title: Image Tag
                  default: latest
                  type: string
                  description: Build Image tag
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: {{ gitlab_host }}
              enum:
                - {{ gitlab_host }}
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: {{ gitlab_destination_group }}
              enum:
                - {{ gitlab_destination_group }}
            verify_commits:
              title: Verify Commits
              type: string
              description: Verify Git repository commits using Red Hatâ€™s Trusted Artifact Signer (TAS) service
              default: disabled
              enum:
                - enabled
                - disabled

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: {{ '${{ parameters.component_id }}' }}
          description: {{ '${{ parameters.description }}' }}
          namespace: {{ '${{ parameters.component_id }}' }}-dev
          owner: {{ '${{ user.entity.metadata.name }}' }}
          cluster: {{ cluster_subdomain }}
          host: {{ '${{ parameters.repo.host }}' }}
          destination: {{ '${{ parameters.repo.owner }}' }}/{{ '${{ parameters.component_id }}' }}
          quay_destination: {{ '${{ parameters.image_organization}}' }}/{{ '${{ parameters.component_id }}' }}
          port: 7860
          verify_commits: {{ '${{ parameters.repo.verify_commits }}' }}
          model_name: {{ '${{ parameters.model_name }}' }}
          model_max_length: {{ '${{ parameters.model_max_length }}' }}
          rhoai_doc_version: {{ '${{ parameters.rhoai_doc_version }}' }}

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: "{{ '${{ parameters.repo.host }}' }}?owner={{ '${{ parameters.repo.owner }}' }}&repo={{ '${{parameters.component_id}}' }}"
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: {{ '${{ steps.publish.output.repoContentsUrl }}' }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: {{ '${{ parameters.component_id }}' }}
          description: {{ '${{ parameters.description }}' }}
          destination: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{parameters.component_id}}' }}-gitops.git
          source_repository: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{parameters.component_id}}' }}.git
          repository_name: {{ '${{parameters.component_id}}' }}
          git_owner: {{ '${{ parameters.repo.owner }}' }}
          cluster: {{ cluster_subdomain }}
          namespace: {{ '${{ parameters.component_id }}' }}-dev
          image_registry: {{ '${{ parameters.image_registry }}' }}
          image_host: {{ '${{ parameters.image_host }}' }}
          image_organization: {{ '${{ parameters.image_organization }}' }}
          image_name: {{ '${{ parameters.component_id }}' }}
          image_tag: {{ '${{ parameters.image_tag }}' }}
          port: 7860
          repository_host: {{ '${{ parameters.repo.host }}' }}
          deployment_name: python-template
          user: {{ '${{ user.entity.metadata.name }}' }}
          verify_commits: {{ '${{ parameters.repo.verify_commits }}' }}
          model_name: {{ '${{ parameters.model_name }}' }}
          model_max_length: {{ '${{ parameters.model_max_length }}' }}
          rhoai_doc_version: {{ '${{ parameters.rhoai_doc_version }}' }}
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:gitlab
      input:
        repoUrl: "{{ '${{ parameters.repo.host }}' }}?owner={{ '${{ parameters.repo.owner }}' }}&repo={{ '${{parameters.component_id}}' }}-gitops"
        title: gitops resources for {{ '${{ parameters.component_id }}' }}
        description: gitops resources for {{ '${{ parameters.component_id }}' }}
        sourcePath: ./tenant-gitops
        repoVisibility: public

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: {{ '${{ parameters.component_id }}' }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://{{ '${{ parameters.repo.host }}' }}/{{ '${{ parameters.repo.owner }}' }}/{{ '${{ parameters.component_id }}' }}-gitops.git
        path: 'argocd/'

  output:
    links:
      - title: Source Code Repository
        url: {{ '${{ steps.publish.output.remoteUrl }}' }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: {{ '${{ steps.register.output.entityRef }}' }}
