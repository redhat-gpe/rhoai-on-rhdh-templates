kind: ConfigMap
metadata:
  name: {{ .Values.app.name }}-embeddings
  annotations:
    argocd.argoproj.io/sync-wave: "-4"
apiVersion: v1
data:
  initialize-embeddings.sh: |
    pip install langchain langchain_huggingface tqdm langchain_community pypdf sentence_transformers
    cp /opt/app-root/embeddings/ingest-embeddings.ipynb /opt/app-root/src
    jupyter nbconvert --to python ingest-embeddings.ipynb
    ipython ingest-embeddings.py
  create-extension.sh: >-
    #!/bin/bash

    while true; do
      if [ ! pg_ready ]; then
        sleep 2
        continue;
      fi
      COUNT=$(psql -d vectordb -c "select count(1) from pg_extension where extname = 'vector'" | sed '3q;d' | xargs || echo '');
      if [ -z "$COUNT" ]; then
        sleep 2;
        continue;
      elif [ "${COUNT}" == "1" ]; then
        break;
      else
        psql -d vectordb -c "CREATE EXTENSION vector;";
      fi
    done
  ingest-embeddings.ipynb: |
    {
    "cells": [
      {
      "cell_type": "markdown",
      "id": "3420575b-4d00-458b-aa0e-7030008ccd53",
      "metadata": {},
      "source": [
        "## Creating an index and populating it with documents using PostgreSQL+pgvector\n",
        "\n",
        "Simple example on how to ingest PDF documents, then web pages content into a PostgreSQL+pgvector VectorStore.\n",
        "\n",
        "Requirements:\n",
        "- A PostgreSQL cluster with the pgvector extension installed (https://github.com/pgvector/pgvector)\n",
        "- A Database created in the cluster with the extension enabled (in this example, the database is named `vectordb`. Run the following command in the database as a superuser:\n",
        "`CREATE EXTENSION vector;`\n",
        "\n",
        "Note: if your PostgreSQL is deployed on OpenShift, directly from inside the Pod (Terminal view on the Console, or using `oc rsh` to log into the Pod), you can run the command: `psql -d vectordb -c \"CREATE EXTENSION vector;\"`\n"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "8308b229-b520-4e82-a783-eb921bb955e7",
      "metadata": {},
      "source": [
        "### Needed packages"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 1,
      "id": "91e41b41-f60a-4b0f-91a1-cd273b60f21b",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "!pip install -q pgvector"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "1a82063d-6153-4812-8977-042241736b53",
      "metadata": {},
      "source": [
        "### Base parameters, the PostgreSQL info"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 2,
      "id": "417ed4a4-9418-4f48-bebd-ef0ea11ae434",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "product_version = f\"{{ .Values.app.documentation.version }}\"\n",
        "CONNECTION_STRING = \"postgresql+psycopg://vectordb:vectordb@postgresql.{{ .Values.app.namespace }}.svc.cluster.local:5432/vectordb\"\n",
        "COLLECTION_NAME = f\"rhoai-doc-{product_version}\""
      ]
      },
      {
      "cell_type": "markdown",
      "id": "9b499a49-128c-4be5-903b-76c40771c7bc",
      "metadata": {
        "tags": []
      },
      "source": [
        "#### Imports"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 3,
      "id": "600cd763-6ecc-4c77-89c0-47108c31c44e",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "from langchain.document_loaders import PyPDFDirectoryLoader, WebBaseLoader\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "from langchain_huggingface import HuggingFaceEmbeddings\n",
        "from langchain.vectorstores.pgvector import PGVector\n",
        "from tqdm.autonotebook import tqdm, trange"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "f68f6785-480e-4519-be4f-8e1738dba4ca",
      "metadata": {},
      "source": [
        "## Initial index creation and document ingestion"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "f8cff5f7-c509-48db-90b5-e15815b8b530",
      "metadata": {},
      "source": [
        "#### Download and load pdfs"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 4,
      "id": "bc4fe0db-f494-4cbd-9e97-8b6359a78cb7",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "documents = [\n",
        "    \"release_notes\",\n",
        "    \"introduction_to_red_hat_openshift_ai\",\n",
        "    \"getting_started_with_red_hat_openshift_ai_self-managed\",\n",
        "    \"openshift_ai_tutorial_-_fraud_detection_example\",\n",
        "    \"developing_a_model\",\n",
        "    \"integrating_data_from_amazon_s3\",\n",
        "    \"working_on_data_science_projects\",\n",
        "    \"working_in_your_data_science_ide\",\n",
        "    \"working_with_data_science_pipelines\",\n",
        "    \"working_with_distributed_workloads\",\n",
        "    \"working_with_accelerators\",\n",
        "    \"working_with_connected_applications\",\n",
        "    \"serving_models\",\n",
        "    \"monitoring_data_science_models\",\n",
        "    \"managing_users\",\n",
        "    \"managing_resources\",\n",
        "    \"installing_and_uninstalling_openshift_ai_self-managed\",\n",
        "    \"installing_and_uninstalling_openshift_ai_self-managed_in_a_disconnected_environment\",\n",
        "    \"upgrading_openshift_ai_self-managed\",\n",
        "    \"upgrading_openshift_ai_self-managed_in_a_disconnected_environment\",   \n",
        "]\n",
        "\n",
        "pdfs = [f\"https://docs.redhat.com/en-us/documentation/red_hat_openshift_ai_self-managed/{product_version}/pdf/{doc}/red_hat_openshift_ai_self-managed-{product_version}-{doc}-en-us.pdf\" for doc in documents]\n",
        "pdfs_to_urls = {f\"red_hat_openshift_ai_self-managed-{product_version}-{doc}-en-us\": f\"https://docs.redhat.com/en/documentation/red_hat_openshift_ai_self-managed/{product_version}/html/{doc}/index\" for doc in documents}"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 5,
      "id": "3eea5acc-49df-41c9-a01a-0cdbca96e8e2",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import os\n",
        "\n",
        "docs_dir = f\"rhoai-doc-{product_version}\"\n",
        "print(pdfs)\n",
        "\n",
        "if not os.path.exists(docs_dir):\n",
        "    os.mkdir(docs_dir)\n",
        "\n",
        "for pdf in pdfs:\n",
        "    try:\n",
        "        response = requests.get(pdf)\n",
        "    except:\n",
        "        print(f\"Skipped {pdf}\")\n",
        "        continue\n",
        "    if response.status_code!=200:\n",
        "        print(f\"Skipped {pdf}\")\n",
        "        continue  \n",
        "    with open(f\"{docs_dir}/{pdf.split('/')[-1]}\", 'wb') as f:\n",
        "        f.write(response.content)"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 6,
      "id": "af4074d4-eff4-45b2-902d-ec8c075a83ef",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "pdf_folder_path = f\"./rhoai-doc-{product_version}\"\n",
        "\n",
        "pdf_loader = PyPDFDirectoryLoader(pdf_folder_path)\n",
        "pdf_docs = pdf_loader.load()"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "cde7ed3a-0530-47a1-95c2-22db6c782a95",
      "metadata": {},
      "source": [
        "#### Inject metadata"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 7,
      "id": "702230f6-e6d3-44c7-a643-4996387606ff",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "from pathlib import Path\n",
        "\n",
        "for doc in pdf_docs:\n",
        "    doc.metadata[\"source\"] = pdfs_to_urls[Path(doc.metadata[\"source\"]).stem]"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "dd511d44-2d92-47a0-9163-b25576c9557b",
      "metadata": {
        "tags": []
      },
      "source": [
        "#### Load websites"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 8,
      "id": "8aebf003-d7ec-43ba-8e04-1931bcff2866",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "websites = [\n",
        "    \"https://ai-on-openshift.io/getting-started/openshift/\",\n",
        "    \"https://ai-on-openshift.io/getting-started/opendatahub/\",\n",
        "    \"https://ai-on-openshift.io/getting-started/openshift-ai/\",\n",
        "    \"https://ai-on-openshift.io/odh-rhoai/configuration/\",\n",
        "    \"https://ai-on-openshift.io/odh-rhoai/custom-notebooks/\",\n",
        "    \"https://ai-on-openshift.io/odh-rhoai/nvidia-gpus/\",\n",
        "    \"https://ai-on-openshift.io/odh-rhoai/custom-runtime-triton/\",\n",
        "    \"https://ai-on-openshift.io/odh-rhoai/openshift-group-management/\",\n",
        "    \"https://ai-on-openshift.io/tools-and-applications/minio/minio/\",\n",
        "    \"https://docs.redhat.com/articles/7047935\",\n",
        "    \"https://docs.redhat.com/articles/rhoai-supported-configs\",\n",
        "]"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 9,
      "id": "99f41110-8ca7-4d90-93b2-3b5021c894b8",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "website_loader = WebBaseLoader(websites)\n",
        "website_docs = website_loader.load()"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "157ddd29-54b3-474a-9b10-2d274bc3254f",
      "metadata": {},
      "source": [
        "#### Merge both types of docs"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 10,
      "id": "8d361094-8b43-4351-8495-37628c35c42d",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "docs = pdf_docs + website_docs"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "4198fe0a-38bf-4cd4-af7d-35b41c645edd",
      "metadata": {},
      "source": [
        "#### Split documents into chunks with some overlap"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 11,
      "id": "edba4a08-2194-4df1-9091-6f2b596757a1",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "text_splitter = RecursiveCharacterTextSplitter(chunk_size=1024,\n",
        "                                               chunk_overlap=40)\n",
        "all_splits = text_splitter.split_documents(docs)\n",
        "all_splits[0]"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "6884f070",
      "metadata": {},
      "source": [
        "#### Cleanup documents as PostgreSQL won't accept the NUL character, '\\x00', in TEXT fields."
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 12,
      "id": "5aefc08d-a4ad-4aad-9120-cfa98b67cbe2",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "for doc in all_splits:\n",
        "    doc.page_content = doc.page_content.replace('\\x00', '')"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "7ae7eae2-c670-4eb5-803b-b4d591fa83db",
      "metadata": {
        "tags": []
      },
      "source": [
        "#### Create the index and ingest the documents"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 13,
      "id": "bbb6a3e3-5ccd-441e-b80d-427555d9e9f6",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "embeddings = HuggingFaceEmbeddings()\n",
        "\n",
        "db = PGVector.from_documents(\n",
        "    documents=all_splits,\n",
        "    embedding=embeddings,\n",
        "    collection_name=COLLECTION_NAME,\n",
        "    connection_string=CONNECTION_STRING,\n",
        "    #pre_delete_collection=True # This deletes existing collection and its data, use carefully!\n",
        ")"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "7a3d987b-8ebc-46ce-a206-48c1339b7a5b",
      "metadata": {},
      "source": [
        "#### Alternatively, add new documents"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 14,
      "id": "c37f227d-a13d-456c-b91b-3c203e62fc0f",
      "metadata": {},
      "outputs": [],
      "source": [
        "# embeddings = HuggingFaceEmbeddings()\n",
        "\n",
        "# db = PGVector(\n",
        "#     connection_string=CONNECTION_STRING,\n",
        "#     collection_name=COLLECTION_NAME,\n",
        "#     embedding_function=embeddings)\n",
        "\n",
        "# db.add_documents(all_splits)"
      ]
      },
      {
      "cell_type": "markdown",
      "id": "dae3b458-4979-46df-8493-7496764a2568",
      "metadata": {},
      "source": [
        "#### Test query"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 17,
      "id": "489c6e6d-c42c-4de4-87cf-8edfd0e63da3",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "query = \"How can I work with GPU and taints in OpenShift AI?\"\n",
        "docs_with_score = db.similarity_search_with_score(query)"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": 16,
      "id": "90feeb37-7888-4c5f-a5cb-5f82637cec16",
      "metadata": {
        "tags": []
      },
      "outputs": [],
      "source": [
        "for doc, score in docs_with_score:\n",
        "    print(\"-\" * 80)\n",
        "    print(\"Score: \", score)\n",
        "    print(doc.page_content)\n",
        "    print(\"-\" * 80)"
      ]
      },
      {
      "cell_type": "code",
      "execution_count": null,
      "id": "40430359-e786-45f5-bc8a-b1bc141de93b",
      "metadata": {},
      "outputs": [],
      "source": []
      }
    ],
    "metadata": {
      "kernelspec": {
      "display_name": "Python 3.9",
      "language": "python",
      "name": "python3"
      },
      "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.18"
      }
    },
    "nbformat": 4,
    "nbformat_minor": 5
    }
